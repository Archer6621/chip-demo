# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Full CI workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  collect_dirs:
    runs-on: ubuntu-latest
    outputs:
      dirs: ${{ steps.dirs.outputs.dirs }}
    steps:
      - uses: actions/checkout@v2
      - id: dirs
        run: echo "dirs=$(find modules/*/ -type d -wholename */app/tests -printf '%h\n' | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> ${GITHUB_OUTPUT}


  build:
    needs: collect_dirs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: ${{ fromJson(needs.collect_dirs.outputs.dirs) }}
    defaults:
      run:
        working-directory: ${{ matrix.dir }}
    steps:
    - uses: actions/checkout@v4
    - uses: cardinalby/export-env-action@v1
      with:
        envFile: ${{ matrix.dir }}/config.env.default
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        source ./config.env.default
        coverage run --branch -m pytest app/tests/
        coverage xml --omit="app/tests/**"
    - name: Python Coverage
      uses: orgoro/coverage@v3.2
      with:
        coverageFile: ${{ matrix.dir }}/coverage.xml
        token: ${{ secrets.GITHUB_TOKEN }}
